{
  "name": "backend",
  "version": "0.0.1",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "//dev": "──────── DEV LOCAL (per serviciu) ────────",

    "dev:auth:db:up": "docker compose -f apps/auth-service/docker-compose.yml up -d",
    "dev:auth:db:down": "docker compose -f apps/auth-service/docker-compose.yml down -v",
    "dev:auth:migrate": "cd apps/auth-service && npx prisma migrate dev && cd ../..",
    "dev:auth:watch": "nest start auth-service --watch",
    "dev:auth:all": "npm run dev:auth:db:up && npm run dev:auth:migrate && npm run dev:auth:watch",

    "dev:user:db:up": "docker compose -f apps/user-service/docker-compose.yml up -d",
    "dev:user:db:down": "docker compose -f apps/user-service/docker-compose.yml down -v",
    "dev:user:migrate": "cd apps/user-service && npx prisma migrate dev && cd ../..",
    "dev:user:watch": "nest start user-service --watch",
    "dev:user:all": "npm run dev:user:db:up && npm run dev:user:migrate && npm run dev:user:watch",

    "dev:device:db:up": "docker compose -f apps/device-service/docker-compose.yml up -d",
    "dev:device:db:down": "docker compose -f apps/device-service/docker-compose.yml down -v",
    "dev:device:migrate": "cd apps/device-service && npx prisma migrate dev && cd ../..",
    "dev:device:watch": "nest start device-service --watch",
    "dev:device:all": "npm run dev:device:db:up && npm run dev:device:migrate && npm run dev:device:watch",

    "dev:dbs:down:all": "npm run dev:auth:db:down && npm run dev:user:db:down && npm run dev:device:db:down",

    "//build-local": "──────── BUILD LOCAL (toate) ────────",
    "generate:all": "cd apps/auth-service && npx prisma generate && cd ../user-service && npx prisma generate && cd ../device-service && npx prisma generate",
    "build:auth": "npx nest build auth-service",
    "build:user": "npx nest build user-service",
    "build:device": "npx nest build device-service",
    "build:all": "npm run build:auth && npm run build:user && npm run build:device",

    "//prod": "──────── PROD (tot în Docker) ────────",
    "docker:prod:clean": "docker compose -f docker-compose.prod.yml down -v",
    "docker:prod:build": "docker compose -f docker-compose.prod.yml build --no-cache",
    "docker:prod:dbs:up": "docker compose -f docker-compose.prod.yml up -d auth-db user-db device-db",

    "prisma:deploy:auth": "docker compose -f docker-compose.prod.yml run --rm auth-service npx prisma migrate deploy --schema=apps/auth-service/prisma/schema.prisma",
    "prisma:deploy:user": "docker compose -f docker-compose.prod.yml run --rm user-service npx prisma migrate deploy --schema=apps/user-service/prisma/schema.prisma",
    "prisma:deploy:device": "docker compose -f docker-compose.prod.yml run --rm device-service npx prisma migrate deploy --schema=apps/device-service/prisma/schema.prisma",

    "prisma:deploy:all": "npm run prisma:deploy:auth && npm run prisma:deploy:user && npm run prisma:deploy:device",

    "docker:prod:up:services": "docker compose -f docker-compose.prod.yml up -d auth-service user-service device-service frontend caddy",
    "docker:prod:up:frontend":"docker compose -f docker-compose.prod.yml up -d frontend",

    "docker:prod:up": "npm run docker:prod:clean && npm run docker:prod:build && npm run docker:prod:dbs:up && node -e \"setTimeout(()=>process.exit(0),5000)\" && npm run prisma:deploy:all && npm run docker:prod:up:services",
    "docker:prod:down": "docker compose -f docker-compose.prod.yml down -v",

    "//ops": "──────── OPS UTILE ────────",
    "logs:api": "docker compose -f docker-compose.prod.yml logs -f auth-service user-service device-service",
    "logs:frontend": "docker compose -f docker-compose.prod.yml logs -f frontend",
    "ps": "docker compose -f docker-compose.prod.yml ps",
    "restart:auth": "docker compose -f docker-compose.prod.yml restart auth-service",
    "restart:user": "docker compose -f docker-compose.prod.yml restart user-service",
    "restart:device": "docker compose -f docker-compose.prod.yml restart device-service",
    "restart:frontend": "docker compose -f docker-compose.prod.yml restart frontend",
    "restart:caddy": "docker compose -f docker-compose.prod.yml restart caddy"
  },
  "dependencies": {
    "@nestjs/common": "^11.1.6",
    "@nestjs/config": "^4.0.2",
    "@nestjs/core": "^11.0.1",
    "@nestjs/jwt": "^11.0.0",
    "@nestjs/microservices": "^11.1.6",
    "@nestjs/passport": "^11.0.5",
    "@nestjs/platform-express": "^11.0.1",
    "@prisma/client": "^6.17.1",
    "amqplib": "^0.10.9",
    "argon2": "^0.44.0",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.2",
    "cookie-parser": "^1.4.7",
    "ioredis": "^5.8.0",
    "nodemailer": "^7.0.9",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "prisma": "^6.16.2",
    "reflect-metadata": "^0.2.2",
    "rxjs": "^7.8.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.2.0",
    "@eslint/js": "^9.18.0",
    "@nestjs/cli": "11.0.0",
    "@nestjs/schematics": "^11.0.0",
    "@nestjs/testing": "^11.0.1",
    "@types/amqplib": "^0.10.7",
    "@types/express": "^5.0.0",
    "@types/jest": "^30.0.0",
    "@types/node": "^22.10.7",
    "@types/passport-jwt": "^4.0.1",
    "@types/supertest": "^6.0.2",
    "eslint": "^9.18.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-prettier": "^5.2.2",
    "globals": "^16.0.0",
    "jest": "^30.0.0",
    "prettier": "^3.4.2",
    "source-map-support": "^0.5.21",
    "supertest": "^7.0.0",
    "ts-jest": "^29.2.5",
    "ts-loader": "9.5.2",
    "ts-node": "10.9.2",
    "tsconfig-paths": "^4.2.0",
    "typescript": "5.5.4",
    "typescript-eslint": "^8.20.0"
  }
}
