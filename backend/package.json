{
  "name": "backend",
  "version": "0.0.1",
  "description": "",
  "author": "",
  "private": true,
  "license": "UNLICENSED",
  "scripts": {
    "//": "──────── Docker: baze de date per serviciu ────────",
    "docker:mq:up": "docker compose -f docker/docker-compose.rabbitmq.yml up -d",
    "docker:mq:down": "docker compose -f docker/docker-compose.rabbitmq.yml down -v",
    "docker:auth:up": "docker compose -f apps/auth-service/docker-compose.yml up -d",
    "docker:auth:down": "docker compose -f apps/auth-service/docker-compose.yml down -v",
    "docker:users:up": "docker compose -f apps/user-service/docker-compose.yml up -d",
    "docker:users:down": "docker compose -f apps/user-service/docker-compose.yml down -v",
    "docker:devices:up": "docker compose -f apps/device-service/docker-compose.yml up -d",
    "docker:devices:down": "docker compose -f apps/device-service/docker-compose.yml down -v",
    "docker:all:up": "npm run docker:auth:up && npm run docker:users:up && npm run docker:devices:up",

    "//2": "──────── Prisma Migrations (pt. fiecare serviciu) ────────",
    "db:auth:migrate": "cd apps/auth-service && npx prisma migrate dev && cd ../..",
    "db:users:migrate": "cd apps/user-service && npx prisma migrate dev && cd ../..",
    "db:devices:migrate": "cd apps/device-service && npx prisma migrate dev && cd ../..",

    "//3": "──────── Start Baze de Date + Migrations ────────",
    "db:auth:up": "npm run docker:auth:up && (timeout 1 2>NUL || sleep 1) && npm run db:auth:migrate",
    "db:users:up": "npm run docker:users:up && (timeout 1 2>NUL || sleep 1) && npm run db:users:migrate",
    "db:devices:up": "npm run docker:devices:up && (timeout 1 2>NUL || sleep 1) && npm run db:devices:migrate",
    "db:all:up": "npm run db:auth:up && npm run db:users:up && npm run db:devices:up",

    "//4": "──────── Start microservicii ────────",
    "start:auth": "nest start auth-service --watch",
    "start:users": "nest start user-service --watch",
    "start:devices": "nest start device-service --watch",
    "build": "nest build",
    "format": "prettier --write \"apps/**/*.ts\" \"libs/**/*.ts\"",
    "start": "nest start",
    "start:dev": "nest start --watch",
    "start:debug": "nest start --debug --watch",
    "start:prod": "node dist/apps/backend/main",
    "lint": "eslint \"{src,apps,libs,test}/**/*.ts\" --fix",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:cov": "jest --coverage",
    "test:debug": "node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand",
    "test:e2e": "jest --config ./apps/backend/test/jest-e2e.json"
  },
  "dependencies": {
    "@nestjs/common": "^11.0.1",
    "@nestjs/config": "^4.0.2",
    "@nestjs/core": "^11.0.1",
    "@nestjs/jwt": "^11.0.0",
    "@nestjs/microservices": "^11.1.6",
    "@nestjs/passport": "^11.0.5",
    "@nestjs/platform-express": "^11.0.1",
    "@prisma/client": "^6.16.2",
    "amqplib": "^0.10.9",
    "argon2": "^0.44.0",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.2",
    "cookie-parser": "^1.4.7",
    "ioredis": "^5.8.0",
    "passport": "^0.7.0",
    "passport-jwt": "^4.0.1",
    "prisma": "^6.16.2",
    "reflect-metadata": "^0.2.2",
    "rxjs": "^7.8.1"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3.2.0",
    "@eslint/js": "^9.18.0",
    "@nestjs/cli": "^11.0.0",
    "@nestjs/schematics": "^11.0.0",
    "@nestjs/testing": "^11.0.1",
    "@types/amqplib": "^0.10.7",
    "@types/express": "^5.0.0",
    "@types/jest": "^30.0.0",
    "@types/node": "^22.10.7",
    "@types/passport-jwt": "^4.0.1",
    "@types/supertest": "^6.0.2",
    "eslint": "^9.18.0",
    "eslint-config-prettier": "^10.0.1",
    "eslint-plugin-prettier": "^5.2.2",
    "globals": "^16.0.0",
    "jest": "^30.0.0",
    "prettier": "^3.4.2",
    "source-map-support": "^0.5.21",
    "supertest": "^7.0.0",
    "ts-jest": "^29.2.5",
    "ts-loader": "^9.5.2",
    "ts-node": "^10.9.2",
    "tsconfig-paths": "^4.2.0",
    "typescript": "^5.7.3",
    "typescript-eslint": "^8.20.0"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": ".",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "**/*.(t|j)s"
    ],
    "coverageDirectory": "./coverage",
    "testEnvironment": "node",
    "roots": [
      "<rootDir>/apps/",
      "<rootDir>/libs/"
    ],
    "moduleNameMapper": {
      "^y/common(|/.*)$": "<rootDir>/libs/common/src/$1"
    }
  }
}